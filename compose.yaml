# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker compose reference guide at
# https://docs.docker.com/compose/compose-file/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  jenkins-docker:
    image: docker:dind
    container_name: jenkins-docker
    privileged: true
    networks:
      - jenkins
    environment:
      DOCKER_TLS_CERTDIR: /certs
    volumes:
      - jenkins-docker-certs:/certs/client
      - jenkins-data:/var/jenkins_home
    ports:
      - "2376:2376"
    command: --storage-driver overlay2
    healthcheck:
      test: [ "CMD", "ping", "-c", "1", "localhost:2376" ]
      interval: 10s
      timeout: 5s
      retries: 5


  master:
    build: ./master
    image: myjenkins-blueocean:2.426.1-1
    container_name: master_c
    environment:
      DOCKER_HOST: tcp://docker:2376
      DOCKER_CERT_PATH: /certs/client
      DOCKER_TLS_VERIFY: 1
    ports:
      - "8080:8080"
      - "50000:50000"
    healthcheck:
      test: [ "CMD", "ping", "-c", "1", "localhost:8080" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - jenkins-data:/var/jenkins_home
      - jenkins-docker-certs:/certs/client:ro
    depends_on:
      jenkins-docker:
        condition: service_healthy
    networks:
      - jenkins
    restart: "on-failure"

  agent-maven:
    build: ./agent-maven
    container_name: agent-maven
    
    
    

  # client:
  #   build: ./client
  #   container_name: client_c
  #   environment:
  #     NODE_ENV: production
  #   ports:
  #     - 3000:3000
  #   volumes:
  #     - ./client:/app
  #     - /app/node_modules
  #   depends_on:
  #     server:
  #       condition: service_healthy

  # The commented out section below is an example of how to define a PostgreSQL
  # database that your application can use. `depends_on` tells Docker Compose to
  # start the database before your application. The `db-data` volume persists the
  # database data between container restarts. The `db-password` secret is used
  # to set the database password. You must create `db/password.txt` and add
  # a password of your choosing to it before running `docker-compose up`.
  #     depends_on:
  #       db:
  #         condition: service_healthy
  # db:
  #   image: postgres
  #   restart: always
  #   user: postgres
  #   secrets:
  #     - db-password
  #   ports:
  #     - 5432:5432
  #   volumes:
  #     - db-data:/var/lib/postgresql/data:rw
  #     - ./sql:/docker-entrypoint-initdb.d
  #   environment:
  #     - POSTGRES_DB=todo
  #     - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
  #   expose:
  #     - 5435
  #   healthcheck:
  #     test: [ "CMD", "pg_isready" ]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
networks:
  jenkins:

volumes:
  jenkins-docker-certs:
  jenkins-data:

