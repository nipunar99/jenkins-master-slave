# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker compose reference guide at
# https://docs.docker.com/compose/compose-file/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  jenkins-docker:
    image: docker:dind
    container_name: jenkins-docker
    privileged: true
    networks:
      - jenkins
    environment:
      DOCKER_TLS_CERTDIR: /certs
    volumes:
      - jenkins-docker-certs:/certs/client
      - jenkins-data:/var/jenkins_home
    ports:
      - "2376:2376"
    command: --storage-driver overlay2
    healthcheck:
      test: [ "CMD", "docker", "info" ]
      interval: 10s
      timeout: 5s
      retries: 5

  master:
    build:
      context: ./master
    image: myjenkins-blueocean:2.426.1-1
    container_name: master_c
    environment:
      DOCKER_HOST: tcp://docker:2376
      DOCKER_CERT_PATH: /certs/client
      DOCKER_TLS_VERIFY: 1
    ports:
      - "8080:8080"
      - "50000:50000"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/login" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - jenkins-data:/var/jenkins_home
      - jenkins-docker-certs:/certs/client:ro
    depends_on:
      jenkins-docker:
        condition: service_healthy
    networks:
      - jenkins
    restart: "on-failure"

  agent-maven:
    build:
      context: ./agent-maven
    container_name: agent-maven
    networks:
      - jenkins
    restart: "on-failure"

  agent-graalvm:
    build:
      context: ./agent-graalvm
    container_name: agent-gradl
    networks:
      - jenkins
    restart: "on-failure"

networks:
  jenkins:


volumes:
  jenkins-docker-certs:
  jenkins-data:


